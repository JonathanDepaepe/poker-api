// <auto-generated />
using System;
using DataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(HpcmContext))]
    partial class HpcmContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccessLayer.Models.Announcement", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"), 1L, 1);

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PostId")
                        .HasName("PK__Announce__AA12601834128234");

                    b.HasIndex(new[] { "ClubId" }, "ClubPostRelation");

                    b.HasIndex(new[] { "CreatorId" }, "CreatorRelation");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubId"), 1L, 1);

                    b.Property<DateTime>("CreationDateTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("Public")
                        .HasColumnType("smallint");

                    b.HasKey("ClubId");

                    b.HasIndex(new[] { "OwnerId" }, "OwnerRelation");

                    b.ToTable("Club", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.ClubMember", b =>
                {
                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasIndex(new[] { "ClubId" }, "ClubMembersRelation");

                    b.HasIndex(new[] { "MemberId" }, "UserMembersRelation");

                    b.ToTable("ClubMembers");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Invitation", b =>
                {
                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("InvitationHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasIndex(new[] { "ClubId" }, "ClubRelation");

                    b.HasIndex(new[] { "MemberId" }, "UserRelation");

                    b.ToTable("Invitation", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Jwt", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("TokenExpirationDate")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.HasIndex(new[] { "MemberId" }, "UserJWTConnection");

                    b.ToTable("Jwt", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeagueId"), 1L, 1);

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<short>("Public")
                        .HasColumnType("smallint");

                    b.HasKey("LeagueId");

                    b.HasIndex(new[] { "ClubId" }, "ClubLeagueRelation");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("DataAccessLayer.Models.LoginModel", b =>
                {
                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("LoginModel", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.HasIndex(new[] { "TypeId" }, "UserTypeRelation");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.MemberType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("TypeId")
                        .HasName("PK__MemberTy__516F03B5D856EE9F");

                    b.ToTable("MemberType", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.RegisterModel", b =>
                {
                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("RegisterModel", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Response", b =>
                {
                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Response", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MaxPlayerCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<short>("Public")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartDateTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("DataAccessLayer.Models.TournamentEntry", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int")
                        .HasColumnName("TournamentID");

                    b.HasIndex(new[] { "TournamentId" }, "TournamentEntriesRelation");

                    b.HasIndex(new[] { "MemberId" }, "TournamentMembersRelation");

                    b.ToTable("TournamentEntries");
                });

            modelBuilder.Entity("DataAccessLayer.Models.TournamentLink", b =>
                {
                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasIndex(new[] { "TournamentId" }, "TournamentRelation");

                    b.ToTable("TournamentLink", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Models.TournamentReservation", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasIndex(new[] { "MemberId" }, "MemberReservationRelation");

                    b.HasIndex(new[] { "TournamentId" }, "TournamentReservationRelation");

                    b.ToTable("TournamentReservations");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Announcement", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Club", "Club")
                        .WithMany("Announcements")
                        .HasForeignKey("ClubId")
                        .IsRequired()
                        .HasConstraintName("ClubPostRelation");

                    b.HasOne("DataAccessLayer.Models.Member", "Creator")
                        .WithMany("Announcements")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("CreatorRelation");

                    b.Navigation("Club");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Club", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Member", "Owner")
                        .WithMany("Clubs")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("OwnerRelation");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DataAccessLayer.Models.ClubMember", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .IsRequired()
                        .HasConstraintName("ClubMembersRelation");

                    b.HasOne("DataAccessLayer.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("UserMembersRelation");

                    b.Navigation("Club");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Invitation", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .IsRequired()
                        .HasConstraintName("ClubRelation");

                    b.HasOne("DataAccessLayer.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("UserRelation");

                    b.Navigation("Club");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Jwt", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("UserJWTConnection");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DataAccessLayer.Models.League", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Club", "Club")
                        .WithMany("Leagues")
                        .HasForeignKey("ClubId")
                        .IsRequired()
                        .HasConstraintName("ClubLeagueRelation");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Member", b =>
                {
                    b.HasOne("DataAccessLayer.Models.MemberType", "Type")
                        .WithMany("Members")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("UserTypeRelation");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DataAccessLayer.Models.TournamentEntry", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("TournamentMembersRelation");

                    b.HasOne("DataAccessLayer.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .IsRequired()
                        .HasConstraintName("TournamentEntriesRelation");

                    b.Navigation("Member");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("DataAccessLayer.Models.TournamentLink", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .IsRequired()
                        .HasConstraintName("TournamentRelation");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("DataAccessLayer.Models.TournamentReservation", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("UserReservationRelation");

                    b.HasOne("DataAccessLayer.Models.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .IsRequired()
                        .HasConstraintName("TournamentReservationRelation");

                    b.Navigation("Member");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Club", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Member", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("DataAccessLayer.Models.MemberType", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
